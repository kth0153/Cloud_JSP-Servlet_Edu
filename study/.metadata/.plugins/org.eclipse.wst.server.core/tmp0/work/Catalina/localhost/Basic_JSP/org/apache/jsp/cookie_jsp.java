/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-27 01:44:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cookie_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>cookie</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- \r\n");
      out.write("	[쿠키 생성]\r\n");
      out.write("	- Cookie cookie = new Cookie(\"cookieName\",\"value1\"); // 쿠키 생성\r\n");
      out.write("	- cookie.setValue(\"value2\"); // 쿠키 값 재설정 -> 잘 사용 하지 않음\r\n");
      out.write("	- cookie.setMaxAge(60*2); // 쿠키 유지 시간 설정(초단위); - 60*60*24(하루 설정)\r\n");
      out.write("	- response.addCookie(cookie); // 쿠키를 클라이언트로 전송\r\n");
      out.write("	\r\n");
      out.write("	- 여러개 쿠키 생성시\r\n");
      out.write("	- response.addCookie(new Cookie(\"cookieName1\",\"value1\"));\r\n");
      out.write("	- response.addCookie(new Cookie(\"cookieName2\",\"value2\"));\r\n");
      out.write("	- response.addCookie(new Cookie(\"cookieName3\",\"value3\"));\r\n");
      out.write("	\r\n");
      out.write("	- 쿠키 삭제 시 cookieName, setMaxAge 값 초기화 시켜야 함\r\n");
      out.write("	\r\n");
      out.write("	[쿠키 로드(읽어오기)]\r\n");
      out.write("	- Cookie[] cookies = request.getCookies(); // client에서 쿠키를 받아옴\r\n");
      out.write("	- (cookies != null) // 쿠키 유무 확인\r\n");
      out.write("	- cookies[num].getName() // 쿠키 이름 얻기\r\n");
      out.write("	- cookies[num].getValue() // 쿠키 값 얻기\r\n");
      out.write("	\r\n");
      out.write("	- Cookie.setComment(\"쿠키에 대한 설명\"); // 의미 없음\r\n");
      out.write("	 -->\r\n");
      out.write("	\r\n");
      out.write("	");

		/* Cookie cookie = new Cookie("name","홍길동"); // 쿠키명 name으로 홍길동 저장
		cookie.setMaxAge(60*60); // 쿠키 유지 시간 설정(초단위);
		response.addCookie(cookie); // 쿠키를 클라이언트로 전송 */
		Cookie[] cookies = request.getCookies(); // client에서 쿠키를 받아둠
		out.println("쿠키의 길이 : " + cookies.length+"<br>"); // 2
		out.println("쿠키의 값 : " + cookies[0].getValue()+"<br>");
		
		if(cookies!=null) {
			for(int i=0;i<cookies.length;i++){ // for(Cookie c : cookies)
				//if(cookies[i].getName().equals("name")){
					out.println(cookies[i].getValue()); 
				//}
				// out.println(cookies[i].getName()); // c.getName();
			}
		}
		
		Cookie clearCookie = new Cookie("name",null); // 쿠키명 name을 null로 치환
		clearCookie.setMaxAge(0);
		response.addCookie(clearCookie);
		/* out.print(cookies.length); */
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
